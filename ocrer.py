#!/usr/bin/env python3
# Largely generated by chatgpt.

# /// script
# dependencies = [
#   "watchdog",
#   "pillow",
#   "pytesseract",
# ]
# ///

import os
import time
import pytesseract
import argparse
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from PIL import Image

def parse_arguments():
    parser = argparse.ArgumentParser(description="OCR file renamer")
    parser.add_argument("--tesseract-path", type=str, help="Path to the Tesseract executable (defaults to just calling `tesseract` on your system, so if that's in your PATH you're probably fine.)")
    parser.add_argument("--watch-folder", type=str, default="ocr-me", help="Folder to watch for new images (default: 'ocr-me' in this folder)")
    return parser.parse_args()

class OCRRenameHandler(FileSystemEventHandler):
    def on_created(self, event):
        if event.is_directory:
            return
        
        time.sleep(1)  # Give some time for the file to be fully written
        self.process(event.src_path)
    
    def process(self, file_path):
        try:
            image = Image.open(file_path)
            extracted_text = pytesseract.image_to_string(image).strip()
            
            if not extracted_text:
                print(f"No text found in {file_path}, skipping rename.")
                return
            
            safe_text = "_".join(extracted_text.split()[:5])  # Use first 5 words for filename #TODO: use the actual good fixes and guidelines I have.
            new_file_path = os.path.join(os.path.dirname(file_path), f"{safe_text}.png")
            
            os.rename(file_path, new_file_path)
            print(f"Renamed {file_path} -> {new_file_path}")
        except Exception as e:
            print(f"Error processing {file_path}: {e}")

if __name__ == "__main__":
    args = parse_arguments()

    if args.tesseract_path:
        pytesseract.pytesseract.tesseract_cmd = args.tesseract_path

    WATCH_FOLDER = args.watch_folder

    event_handler = OCRRenameHandler()
    observer = Observer()
    observer.schedule(event_handler, WATCH_FOLDER, recursive=False)
    observer.start()
    
    print(f"Watching folder: {WATCH_FOLDER}")
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
